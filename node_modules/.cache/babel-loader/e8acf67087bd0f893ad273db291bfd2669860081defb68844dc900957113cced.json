{"ast":null,"code":"var _jsxFileName = \"/home/benjangu/Projects/JobApps/Elastik/elastik-app/src/components/js/main.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccessTokenContext = /*#__PURE__*/createContext();\nexport function AccessTokenProvider({\n  children\n}) {\n  _s();\n  const [accessToken, setAccessToken] = useState(null);\n  return /*#__PURE__*/_jsxDEV(AccessTokenContext.Provider, {\n    value: {\n      accessToken,\n      setAccessToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n_s(AccessTokenProvider, \"byymgQvS0XlwfHFw30nZTov/dhE=\");\n_c = AccessTokenProvider;\nexport function useAccessToken() {\n  _s2();\n  return useContext(AccessTokenContext);\n}\n_s2(useAccessToken, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst TokenRefresher = () => {\n  _s3();\n  const refreshToken = async () => {\n    const refreshToken = localStorage.getItem('refreshToken');\n    const username = localStorage.getItem('username');\n    const response = await fetch('https://2a2tyby9f2.execute-api.ap-southeast-2.amazonaws.com/Test/refreshToken', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        refreshToken,\n        username\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      localStorage.setItem('accessToken', data.accessToken);\n      console.log('Access token refreshed:', data.accessToken);\n    } else {\n      const error = await response.json();\n      console.error('Error refreshing token:', error);\n    }\n  };\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refreshToken();\n    }, 3600000); // 1 hour in milliseconds\n\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, []);\n  return null; // This component doesn't render anything\n};\n_s3(TokenRefresher, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c2 = TokenRefresher;\nexport function validateEmail(email) {\n  const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,7}$/;\n  return regex.test(email.toLowerCase());\n}\nexport function validatePassword(password) {\n  // Check if the password contains at least:\n  // 1. One number\n  // 2. One special character (from the provided list)\n  // 3. One uppercase letter\n  // 4. One lowercase letter\n\n  const hasNumber = /[0-9]/.test(password);\n  const hasSpecialChar = /[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\-\\\\/]/.test(password);\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasLowercase = /[a-z]/.test(password);\n  return hasNumber && hasSpecialChar && hasUppercase && hasLowercase;\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"AccessTokenProvider\");\n$RefreshReg$(_c2, \"TokenRefresher\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AccessTokenContext","AccessTokenProvider","children","_s","accessToken","setAccessToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAccessToken","_s2","TokenRefresher","_s3","refreshToken","localStorage","getItem","username","response","fetch","method","headers","body","JSON","stringify","ok","data","json","setItem","console","log","error","interval","setInterval","clearInterval","_c2","validateEmail","email","regex","test","toLowerCase","validatePassword","password","hasNumber","hasSpecialChar","hasUppercase","hasLowercase","$RefreshReg$"],"sources":["/home/benjangu/Projects/JobApps/Elastik/elastik-app/src/components/js/main.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AccessTokenContext = createContext();\n\nexport function AccessTokenProvider({ children }) {\n  const [accessToken, setAccessToken] = useState(null);\n\n  return (\n    <AccessTokenContext.Provider value={{ accessToken, setAccessToken }}>\n      {children}\n    </AccessTokenContext.Provider>\n  );\n}\n\nexport function useAccessToken() {\n  return useContext(AccessTokenContext);\n}\n\nconst TokenRefresher = () => {\n  const refreshToken = async () => {\n    const refreshToken = localStorage.getItem('refreshToken');\n    const username = localStorage.getItem('username');\n\n    const response = await fetch('https://2a2tyby9f2.execute-api.ap-southeast-2.amazonaws.com/Test/refreshToken', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ refreshToken, username })\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      localStorage.setItem('accessToken', data.accessToken);\n      console.log('Access token refreshed:', data.accessToken);\n    } else {\n      const error = await response.json();\n      console.error('Error refreshing token:', error);\n    }\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refreshToken();\n    }, 3600000); // 1 hour in milliseconds\n\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, []);\n\n  return null; // This component doesn't render anything\n};\n\n\n\n\nexport function validateEmail(email) {\n  const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,7}$/;\n  return regex.test(email.toLowerCase());\n}\n\nexport function validatePassword(password) {\n  // Check if the password contains at least:\n  // 1. One number\n  // 2. One special character (from the provided list)\n  // 3. One uppercase letter\n  // 4. One lowercase letter\n\n  const hasNumber = /[0-9]/.test(password);\n  const hasSpecialChar = /[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\-\\\\/]/.test(password);\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasLowercase = /[a-z]/.test(password);\n\n  return hasNumber && hasSpecialChar && hasUppercase && hasLowercase;\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}