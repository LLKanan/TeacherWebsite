{"ast":null,"code":"var _jsxFileName = \"/home/benjangu/Projects/JobApps/Elastik/elastik-app/src/components/js/main.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccessTokenContext = createContext();\nexport function AccessTokenProvider({\n  children\n}) {\n  _s();\n  const [accessToken, setAccessToken] = useState(null);\n  return /*#__PURE__*/_jsxDEV(AccessTokenContext.Provider, {\n    value: {\n      accessToken,\n      setAccessToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n_s(AccessTokenProvider, \"byymgQvS0XlwfHFw30nZTov/dhE=\");\n_c = AccessTokenProvider;\nexport function useAccessToken() {\n  _s2();\n  return useContext(AccessTokenContext);\n}\n_s2(useAccessToken, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function validateEmail(email) {\n  const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,7}$/;\n  return regex.test(email.toLowerCase());\n}\nexport function validatePassword(password) {\n  // Check if the password contains at least:\n  // 1. One number\n  // 2. One special character (from the provided list)\n  // 3. One uppercase letter\n  // 4. One lowercase letter\n\n  const hasNumber = /[0-9]/.test(password);\n  const hasSpecialChar = /[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\-\\\\/]/.test(password);\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasLowercase = /[a-z]/.test(password);\n  return hasNumber && hasSpecialChar && hasUppercase && hasLowercase;\n}\nvar _c;\n$RefreshReg$(_c, \"AccessTokenProvider\");","map":{"version":3,"names":["AccessTokenContext","createContext","AccessTokenProvider","children","_s","accessToken","setAccessToken","useState","_jsxDEV","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAccessToken","_s2","useContext","validateEmail","email","regex","test","toLowerCase","validatePassword","password","hasNumber","hasSpecialChar","hasUppercase","hasLowercase","$RefreshReg$"],"sources":["/home/benjangu/Projects/JobApps/Elastik/elastik-app/src/components/js/main.js"],"sourcesContent":["const AccessTokenContext = createContext();\n\nexport function AccessTokenProvider({ children }) {\n  const [accessToken, setAccessToken] = useState(null);\n\n  return (\n    <AccessTokenContext.Provider value={{ accessToken, setAccessToken }}>\n      {children}\n    </AccessTokenContext.Provider>\n  );\n}\n\nexport function useAccessToken() {\n  return useContext(AccessTokenContext);\n}\n\nexport function validateEmail(email) {\n  const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,7}$/;\n  return regex.test(email.toLowerCase());\n}\n\nexport function validatePassword(password) {\n  // Check if the password contains at least:\n  // 1. One number\n  // 2. One special character (from the provided list)\n  // 3. One uppercase letter\n  // 4. One lowercase letter\n\n  const hasNumber = /[0-9]/.test(password);\n  const hasSpecialChar = /[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\-\\\\/]/.test(password);\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasLowercase = /[a-z]/.test(password);\n\n  return hasNumber && hasSpecialChar && hasUppercase && hasLowercase;\n}\n\n"],"mappings":";;;;AAAA,MAAMA,kBAAkB,GAAGC,aAAa,CAAC,CAAC;AAE1C,OAAO,SAASC,mBAAmBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAChD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EAEpD,oBACEC,OAAA,CAACR,kBAAkB,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,WAAW;MAAEC;IAAe,CAAE;IAAAH,QAAA,EACjEA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACkB,CAAC;AAElC;AAACV,EAAA,CAReF,mBAAmB;AAAAa,EAAA,GAAnBb,mBAAmB;AAUnC,OAAO,SAASc,cAAcA,CAAA,EAAG;EAAAC,GAAA;EAC/B,OAAOC,UAAU,CAAClB,kBAAkB,CAAC;AACvC;AAACiB,GAAA,CAFeD,cAAc;AAI9B,OAAO,SAASG,aAAaA,CAACC,KAAK,EAAE;EACnC,MAAMC,KAAK,GAAG,mDAAmD;EACjE,OAAOA,KAAK,CAACC,IAAI,CAACF,KAAK,CAACG,WAAW,CAAC,CAAC,CAAC;AACxC;AAEA,OAAO,SAASC,gBAAgBA,CAACC,QAAQ,EAAE;EACzC;EACA;EACA;EACA;EACA;;EAEA,MAAMC,SAAS,GAAG,OAAO,CAACJ,IAAI,CAACG,QAAQ,CAAC;EACxC,MAAME,cAAc,GAAG,mCAAmC,CAACL,IAAI,CAACG,QAAQ,CAAC;EACzE,MAAMG,YAAY,GAAG,OAAO,CAACN,IAAI,CAACG,QAAQ,CAAC;EAC3C,MAAMI,YAAY,GAAG,OAAO,CAACP,IAAI,CAACG,QAAQ,CAAC;EAE3C,OAAOC,SAAS,IAAIC,cAAc,IAAIC,YAAY,IAAIC,YAAY;AACpE;AAAC,IAAAd,EAAA;AAAAe,YAAA,CAAAf,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}